#!/usr/bin/env python3

import logging
import os
import json
import yaml
from pathlib import Path
from dataclasses import dataclass


@dataclass
class hardening_manifest:
    hm_path: Path = Path(hm_path)
    with path.open("r") as f:
        tmp_obj: dict = yaml.safe_load(f)
    image_name: str = tmp_obj["name"]
    image_tag: str = tmp_obj["tags"][0]
    base_image_name: str = tmp_obj["args"]["BASE_IMAGE"]
    base_image_tag: str = tmp_obj["args"]["BASE_TAG"]
    # TODO: define labels type
    labels: dict = tmp_obj["labels"]
    # TODO: define resources type
    resources: list[dict] = tmp_obj["resources"]

    # def validate_hardening_manifest():


"""
    cht_project = CHT_Project()
    hm = hardening_manifest(cht_project.hardening_manifest) # _path ?
    ibfe_post_data = {
        "name": hm.image_name
        "tag": hm.image_tag
        "base_image": f"{hm.base_image_name}:{hm.base_image_tag}"
        "mil.dso.ironbank.image.keywords": hm.labels['mil.dso.ironbank.image.keywords']
    }
"""

"""
import artifacts

cht_project = CHT_Project()
hm = hardening_manifest(cht_project.hardening_manifest) # _path ?

for resource in hm.resources:
    downloaded_resource = curl resource['url']
    validate sha of resource['validation']['value'] == shasum(downloaded_resource)

"""


# hm = hardening_manifest(Project().hardening_manifest)
# hm.image_name
# hm.image_tag

# Get values generated by process_yaml() in metadata.py
# Currently used to retrieve keywords and tags
def source_values(source_file, key) -> list:
    num_vals = 0
    val_list = []
    if os.path.exists(source_file):
        with open(source_file, mode="r", encoding="utf-8") as sf:
            for line in sf:
                val_entry = line.strip()
                val_list.append(val_entry)
                num_vals += 1
        logging.info(f"Number of {key} detected: {num_vals}")
    else:
        logging.info(source_file + " does not exist")
    return val_list


def get_source_keys_values(source_file) -> dict:
    """
    Returns the labels from the hardening_manifest.yaml file as dictionary.
    Ignore keywords since IBFE already has an implementation for gathering keywords

    """
    hm_labels = {}
    if os.path.exists(source_file):
        with open(source_file, mode="r", encoding="utf-8") as sf:
            for line in sf:
                key, value = line.rstrip().split("=", 1)
                if key != "mil.dso.ironbank.image.keywords":
                    hm_labels[key] = value
    return hm_labels


def get_approval_status(source_file) -> tuple[str, str]:
    if os.path.exists(source_file):
        with open(source_file, mode="r", encoding="utf-8") as sf:
            approval_object = json.load(sf)
    approval_status = approval_object["IMAGE_APPROVAL_STATUS"]
    approval_text = approval_object["IMAGE_APPROVAL_TEXT"]
    return approval_status, approval_text
