check-cves:
  stage: publish
  extends:
    - .setup_modules
  allow_failure:
    exit_codes: 100
  needs:
    - setup
    - anchore-scan
    - openscap-compliance
    - twistlock-scan
    - vat
  script:
    - set +e
    - 'python3 "${PIPELINE_REPO_DIR}/pipeline1/7-publish/vat_response_parse.py"'

check-findings:
  variables:
    TRIGGERING_PROJECT_ID: $CI_PROJECT_ID
    ROBOTNIK_COMMAND: projectfindings
    ROBOTNIK_SUBCOMMAND: check
  stage: publish
  allow_failure: true
  rules:
    - if: $SKIP_FINDINGS_TRIGGER
      when: never
    - if: $CI_COMMIT_BRANCH == "master"
  needs:
    - job: vat
      artifacts: false
  trigger:
    project: ironbank-tools/containers/cht-automation/bots/robotnik
    branch: main

generate-documentation:
  stage: publish
  extends:
    - .setup_modules
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
  variables:
    ARTIFACT_DIR: "${ARTIFACT_STORAGE}/documentation"
    OPENSCAP_VERSION_FILE: "${ARTIFACT_STORAGE}/scan-results/openscap/oscap-version.txt"
    TWISTLOCK_VERSION_FILE: "${ARTIFACT_STORAGE}/scan-results/twistlock/twistlock-version.txt"
    ANCHORE_VERSION_FILE: "${ARTIFACT_STORAGE}/scan-results/anchore/anchore-version.txt"
    # Put generated csv report in the scan-results folder
    CSV_REPORT: "${ARTIFACT_STORAGE}/scan-results/csvs"
    # reusing the VAT artifact dir to prevent redownloading
    VAT_ARTIFACT_DIR: "${ARTIFACT_STORAGE}/vat"
    ENV_FILENAME: "csv_output.env"
  needs:
    - setup
    - build
    - scan-logic
    - anchore-scan
    - twistlock-scan
    - openscap-compliance
    - vat
  script:
    - 'mkdir -p "${ARTIFACT_DIR}/reports"'
    - '"${PIPELINE_REPO_DIR}/pipeline1/7-publish/ib-manifest-run.sh"'
    - '"${PIPELINE_REPO_DIR}/pipeline1/7-publish/write-json-docs-run.sh"'
    - python3 "${PIPELINE_REPO_DIR}/pipeline1/7-publish/pipeline_csv_gen.py"
    - python3 "${PIPELINE_REPO_DIR}"/pipeline1/7-publish/excel_convert.py -i "${CSV_REPORT}"/ -o "${CSV_REPORT}"/"${CI_PROJECT_NAME}":"${IMAGE_VERSION}"-"${CI_PIPELINE_ID}"-justifications.xlsx
  artifacts:
    when: always
    paths:
      - $ARTIFACT_DIR
      - "${CSV_REPORT}"
    expire_in: 1 week

harbor:
  stage: publish
  extends:
    - .setup_modules
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
  resource_group: harbor_phase
  needs:
    - setup
    - build
    - create-sbom
    - scan-logic
    - vat
  variables:
    KUBERNETES_SERVICE_ACCOUNT_OVERWRITE: sign
    ACCESS_LOG_DIR: ${ARTIFACT_STORAGE}/build
    ARTIFACT_DIR: ${ARTIFACT_STORAGE}/harbor
    PARENT_VAT_RESPONSE: ${ARTIFACT_STORAGE}/vat/parent_vat_response.json
    SBOM_DIR: ${ARTIFACT_STORAGE}/sbom
    VAT_RESPONSE: ${ARTIFACT_STORAGE}/vat/vat_response.json

  script:
    - 'mkdir -p "${ARTIFACT_DIR}"'
    - 'python3 "${PIPELINE_REPO_DIR}/pipeline1/7-publish/upload_to_harbor.py"'
  artifacts:
    when: always
    paths:
      - "${ARTIFACT_DIR}/"

update-staging-attestations:
  stage: publish
  extends:
    - .setup_modules
  rules:
    - if: $CI_COMMIT_BRANCH != "master" && $PUBLISH_VAT_STAGING_PREDICATES
  resource_group: harbor_phase
  needs:
    - setup
    - build
    - create-sbom
    - scan-logic
    - vat
  variables:
    ACCESS_LOG_DIR: ${ARTIFACT_STORAGE}/build
    ARTIFACT_DIR: ${ARTIFACT_STORAGE}/harbor
    PARENT_VAT_RESPONSE: ${ARTIFACT_STORAGE}/vat/parent_vat_response.json
    SBOM_DIR: ${ARTIFACT_STORAGE}/sbom
    VAT_RESPONSE: ${ARTIFACT_STORAGE}/vat/vat_response.json

  script:
    - 'mkdir -p "${ARTIFACT_DIR}"'
    - 'python3 "${PIPELINE_REPO_DIR}/pipeline1/7-publish/upload_to_harbor.py"'
  artifacts:
    when: always
    paths:
      - "${ARTIFACT_DIR}/"
