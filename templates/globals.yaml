image: registry1.dso.mil/ironbank-staging/ironbank-pipelines/pipeline-runner:v0.6.3
stages:
  ### preprocess stage
  # clone down the templates directory for use in later stages
  # Requirements:
  # - executor image with git
  - preprocess

  ### lint stage
  # yaml lint (ci file, hardening_manifest.yaml), dockerfile lint, wl compare lint
  # Requirements:
  # - executor image with Python 3.x installed
  - lint

  ### pre-build stage
  # download artifacts/clamav scan
  # Requirements:
  # - executor image with Python 3.x installed
  - import-artifacts

  ### build stage
  # build image w version tag and create tar file
  - build

  ### post-build stage
  # container archive output
  - post-build

  # SBOM and Access Log Parsing
  - sbom-access-log

  ### scanning stage
  # twistlock, oscap, and anchore scans
  - scanning

  ### VAT stage
  - vat

  ### create csv output
  - csv-output

  ### check cve stage
  - check-cves

  ### Sign image and manifest and write documentation
  - documentation

  ### harbor stage
  # push to harbor (runs on master)
  - harbor

  ### s3 stage
  # publish artifacts to S3 (runs on development and master)
  - s3-publish

  - stargate

include:
  - local: stages/preprocess/load-scripts.yaml
  - local: stages/scanning/base.yaml

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH

variables:
  # Gitlab CI vars
  ARTIFACT_STORAGE: "ci-artifacts"
  PIPELINE_REPO_DIR: "${ARTIFACT_STORAGE}/ironbank_pipeline"
  GIT_SSL_NO_VERIFY: "1"
  TARGET_BRANCH: master
  # WL_TARGET_BRANCH: master

  # Controls if ironbank-staging is the source registry for base images
  STAGING_BASE_IMAGE: ""

  # Scan reports
  OSCAP_CVE_XML_FILENAME: "report-cve.xml"
  OSCAP_CVE_HTML_FILENAME: "report-cve.html"
