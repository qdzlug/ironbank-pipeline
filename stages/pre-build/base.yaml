.pre-build:
  stage: pre-build
  image: ${GITLAB_INTERNAL_REGISTRY}/dsop/ironbank-pipeline/all-in-one-fedora:1.0
  #image: quay.io/podman/stable:latest
  allow_failure: true

import_artifacts:
  extends: .pre-build
  before_script:
    - mkdir -p ${ARTIFACT_FOLDER}/pipeline-artifacts/application-artifacts
    # - sudo pip3 install pyyaml --upgrade
    - podman pull ${GITLAB_INTERNAL_REGISTRY}/dsop/ironbank-pipeline/clamav:0.102.4
  script:
    - python3 "${PIPELINE_REPO_DIR}/stages/pre-build/downloader.py" -i ${CI_PROJECT_DIR}/download.yaml -d ${ARTIFACT_FOLDER}/pipeline-artifacts/application-artifacts
    - podman run -v "${ARTIFACT_FOLDER}/pipeline-artifacts/application-artifacts:/scan:ro" ${GITLAB_INTERNAL_REGISTRY}/dsop/ironbank-pipeline/clamav:0.102.4 | tee ${ARTIFACT_FOLDER}/pipeline-artifacts/application-artifacts/report-clamav-artifacts.txt
    #    - INFECTED_ARTIFACT_FILES=$(grep -e "^Infected files:" ${ARTIFACT_FOLDER}/pipeline-artifacts/application-artifacts/report-clamav-artifacts.txt | cut -d ' ' -f3)
    #    - |
    #      if [ ${INFECTED_ARTIFACT_FILES} -gt 0 ]
    #      then
    #        echo Malware detected in vendor/customer artifacts! Number of findings: ${INFECTED_ARTIFACT_FILES}
    #        exit 1
    #      fi
  # after_script:
  #   - podman image rm -f ${GITLAB_INTERNAL_REGISTRY}/clamav:0.102.4
  artifacts:
    when: always
    paths:
      - ${ARTIFACT_FOLDER}/pipeline-artifacts/application-artifacts

# image_signature:
#   extends: .import_artifacts
#   allow_failure: true
#   image: image-registry.openshift-image-registry.svc:5000/jenkins/jenkins-oscap-agent:1.1
#   before_script:
#     - docker version
#   script:
#     - IMAGE=$(grep "FROM" Dockerfile | cut -d " " -f2)
#     - docker trust inspect ${IMAGE} | tee ${CI_PROJECT_DIR}/pipeline-artifacts/report-image-trust.txt
#   artifacts:
#     when: always
#     paths:
#       - ${CI_PROJECT_DIR}/pipeline-artifacts/

