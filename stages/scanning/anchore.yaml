#
# Anchore Scanning stage
#
# This stage currently installs anchore-cli and then sets up the environment
# to access the Anchore instance. The anchore_scan.py script makes use of the
# environment variables as well to configure access.
#
# NOTE: The anchore_debug and anchore_timeout variables are set as environment
#       variables in the gitlab dsop group. This allows them to be modified
#       without needing to submit code changes.
#
# Test command:
#   ANCHORE_CLI_PASS=<pass> \
#   ANCHORE_CLI_URL=https://anchore-api.admin.dsop.io \
#   ANCHORE_CLI_USER=<user> \
#   ANCHORE_SCAN_DIRECTORY=<outdir> \
#   ANCHORE_DEBUG=True \
#   IMAGE_NAME=registry1.dsop.io/ironbank-staging/opensource/pipeline-test-project/kubectl:v1.18.8 \
#   IMAGE_ID=<id> python3 anchore_scan.py
#

anchore scan:
  extends: .scanning
  stage: scanning
  image: "${GITLAB_INTERNAL_REGISTRY}/ironbank-tools/ironbank-pipeline/jenkins-oscap-agent:1.1"
  # Load in the IMG_VERSION variable from load scripts env
  dependencies:
    - load scripts
    - build-dev
    - build-master
  variables:
    # put all scan outputs in the scan-results folder
    ANCHORE_SCANS: "${ARTIFACT_STORAGE}/scan-results/anchore"
  script:
    # TODO: Add the Dockerfile with anchore-cli add
    - '"${PIPELINE_REPO_DIR}/stages/scanning/anchore-run.sh"'
  artifacts:
    when: always
    paths:
      - "${ANCHORE_SCANS}/"
    expire_in: 1 week
