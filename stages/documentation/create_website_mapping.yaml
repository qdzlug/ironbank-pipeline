create mapping website:
  extends: .documentation
  image: ${GITLAB_INTERNAL_REGISTRY}/ironbank-tools/ironbank-pipeline/all-in-one-fedora:1.0
  variables:
    #TODO: Put these in globals
    IMAGE_FILE: ${CI_PROJECT_NAME}-${IMG_VERSION}
    BASE_BUCKET_DIRECTORY: "testing/container-scan-reports"
    AWS_KEY: ${S3_ACCESS_KEY}
    AWS_SECRET: ${S3_SECRET_KEY}
    OSCAP_SCANS: ${ARTIFACT_STORAGE}/scanning/openscap
    CSV_REPORT: ${ARTIFACT_STORAGE}/scan-results/csv-output
    ANCHORE_SCANS: ${ARTIFACT_STORAGE}/scan-results/anchore
    TWISTLOCK_SCANS: ${ARTIFACT_STORAGE}/scan-results/twistlock
    SIG_FILE: signature
    DOCUMENTATION_FILENAME: documentation
    ARTIFACT_DIR: ${ARTIFACT_STORAGE}/documentation
  dependencies:
    - load scripts
    - build
    - openscap compliance
    - openscap cve
    - twistlock scan
    - anchore scan
    - wl compare lint
  before_script:
    - |
      if [ "${CI_COMMIT_BRANCH}" == "master" ]; then
        export BASE_BUCKET_DIRECTORY="container-scan-reports"
      fi
    - REMOTE_REPORT_DIRECTORY="$(date +%FT%T)_${CI_COMMIT_SHA}/reports"
    - REMOTE_DOCUMENTATION_DIRECTORY="$(date +%FT%T)_${CI_COMMIT_SHA}"
    - S3_HTML_LINK="https://s3-us-gov-west-1.amazonaws.com/${S3_REPORT_BUCKET}/${BASE_BUCKET_DIRECTORY}/${CI_PROJECT_NAME}/${IMG_VERSION}"
    - GPG_PUB_KEY=$(awk '{printf "%s\\n", $0}' ${IB_CONTAINER_GPG_PUBKEY})
    - mkdir -p ${ARTIFACT_DIR}
  
  script:
    - |
      cat <<EOF > "${ARTIFACT_DIR}/repo_map.json"
      {[
        "Repo_Name": "${CI_PROJECT_DIR}",
        "Approval_Status": "${IMAGE_APPROVAL_STATUS}",
        "Public_Key": "${GPG_PUB_KEY}",
        "Image_Sha": "${IMAGE_ID}",
        "Image_Name": "${CI_PROJECT_NAME}",
        "Image_Tag": "${IMG_VERSION}", 
        "Image_Path": "${REGISTRY_URL}/${IM_NAME}:${IMG_VERSION}",
        "Image_URL": "${S3_HTML_LINK}",
        "Build_Number": "${CI_COMMIT_SHA}",
        "Image_Manifest": "${S3_HTML_LINK}/${REMOTE_REPORT_DIRECTORY}/manifest.json",
        "Manifest_Name": "manifest.json",
        "PGP_Signature": "${S3_HTML_LINK}/${REMOTE_REPORT_DIRECTORY}/${SIG_FILE}.sig",
        "Signature_Name": "${SIG_FILE}.sig",
        "Version_Documentation": "${S3_HTML_LINK}/${REMOTE_REPORT_DIRECTORY}/${DOCUMENTATION_FILENAME}.json",
        "Tar_Location": "${S3_HTML_LINK}/${REMOTE_REPORT_DIRECTORY}/${IMAGE_FILE}.tar",
        "Tar_Name": "${IMAGE_FILE}.tar",
        "OpenSCAP_Compliance_Results": "${S3_HTML_LINK}/${REMOTE_REPORT_DIRECTORY}/csvs/oscap.csv",
        "OpenSCAP_OVAL_Results": "${S3_HTML_LINK}/${REMOTE_REPORT_DIRECTORY}/csvs/oval.csv",
        "TwistLock_Results": "${S3_HTML_LINK}/${REMOTE_REPORT_DIRECTORY}/csvs/tl.csv",
        "Anchore_Gates_Results": "${S3_HTML_LINK}/${REMOTE_REPORT_DIRECTORY}/csvs/anchore_gates.csv",
        "Anchore_Security_Results": "${S3_HTML_LINK}/${REMOTE_REPORT_DIRECTORY}/csvs/anchore_security.csv",
        "Summary_Report": "${S3_HTML_LINK}/${REMOTE_REPORT_DIRECTORY}/csvs/summary.csv",
        "Full_Report": "${S3_HTML_LINK}/${REMOTE_REPORT_DIRECTORY}/csvs/all_scans.xlsx",
        "OpenSCAP_Report": "${S3_HTML_LINK}/${REMOTE_REPORT_DIRECTORY}/openscap/report.html",
        "OVAL_Report": "${S3_HTML_LINK}/${REMOTE_REPORT_DIRECTORY}/openscap/report-cve.html",
        "Signature_Name": "${SIG_FILE}.sig"
      ]}
      EOF
    - cat "${ARTIFACT_DIR}/repo_map.json"
  artifacts:
    when: always
    paths: 
      - ${ARTIFACT_DIR} 
    expire_in: 1 week

