.post-build:
  stage: post-build
  needs:
    - load-scripts
    - build
  retry:
    max: 2
    when: runner_system_failure

create-tar:
  extends:
    - .post-build
    - .setup_modules
  variables:
    IMAGE_FILE: "${CI_PROJECT_NAME}-${CI_PIPELINE_ID}"
  script:
    - 'python3 "${PIPELINE_REPO_DIR}/stages/post-build/create_tar.py"'
  artifacts:
    when: always
    paths:
      - ${IMAGE_FILE}.tar
    expire_in: 1 week

create-sbom:
  extends: .post-build
  variables:
    SBOM_DIR: "${ARTIFACT_STORAGE}/sbom"
  artifacts:
    when: always
    paths:
      - "${SBOM_DIR}/"
    expire_in: 1 week
  image: "registry1.dso.mil/ironbank/anchore/enterprise/enterprise:4.4.1"
  script:
    - 'python3 "${PIPELINE_REPO_DIR}/stages/post-build/generate_sbom.py"'

    
### Tidelift.com SaaS Integration with ironbank-pipeline workflow ######
### Job will create a 1:1 container image project alignment with the Tidelift Catalog
tidelift-upload:
  extends:
    - .post-build
  needs:
    - lint
    - build
    - create-sbom
  variables:
    TIDELIFT_API_KEY: "${TIDELIFT_API_KEY}"
    SBOM_DIR: "${ARTIFACT_STORAGE}/sbom" 
    TIDELIFT_DIR: "${ARTIFACT_STORAGE}/tidelift"
    TIDELIFT_ORG_NAME: us-ironbank
    TIDELIFT_PROJECT_BRANCH: "${CI_COMMIT_BRANCH}"
    #set IB Tier Group to "General" as default for now. 
    IRONBANK_CLASSIFICATION: General  
    TIDELIFT_PROJECT_GROUP: "${IRONBANK_CLASSIFICATION}" 
    IRONBANK_IMAGE_NAME: "${IMAGE_NAME}"
    TIDELIFT_PROJECT_TAG: "${IMAGE_VERSION}"
    TIDELIFT_PROJECT_NAME: ""  
    TIDELIFT_PROJECT_EXTERNAL_ID: ""
    TIDELIFT_PROJECT_SUPPLIER:  ""
    TIDELIFT_PROJECT_SUPPLIER_TYPE: ""
    #The Tidelift catalog is to tbd at this time until IB and PI teams determine how to best capture data intellgience for their container image suppliers
    #they do not treat the container images differently (according to CHT lead)
    TIDELIFT_PROJECT_CATALOG: "ibtest"
    #notes: "${TIDELIFT_IMAGE_NAME}" uses "${CI_PROJECT_NAME}"
    #notes ref: https://docs.gitlab.com/ee/ci/variables/predefined_variables.html 
    #Variables for Tidelift Reports
    TIDELIFT_ALIGNMENT_ID:  ""
    TIDELIFT_ALIGNMENT_ERROR:  ""
    TL_JOB: ""
   # TIDELIFT_CVE_REPORT_ID: TBD
   # TIDELIFT_CVE_REPORT_NAME:  "${TIDELIFT_PROJECT_EXTERNAL_ID}_tidelift_cve_report.json"
  artifacts:
    when: always
    paths:
      - "${SBOM_DIR}/"
    expire_in: 1 week
  script:
    #Tidelift integration with Iron Bank Pipeline for all projects, branches, and PRs. 

    - echo "List of available SBOMs for project:"
    - pushd ${SBOM_DIR}
    - ls -lha
    - popd

    - echo "Coping Cyclonedx (sbom-cyclonedx-json.json) SBOM from Harbor artifacs directory"
    - cp ${SBOM_DIR}/sbom-cyclonedx-json.json cyclonedx.json
    - echo "SBOM file copied to working directory"
    - echo "Downloading Tidelift CLI binary file" 
    - curl https://download.tidelift.com/cli/tidelift -o tidelift
    - echo "Setting Tidelift CLI permissions and updating binary file"
    - | 
        chmod +x tidelift
        ./tidelift selfupdate

    - echo "-* PRINTING ENV VARIABLES *-"
    - echo "TIDELIFT_PROJECT_BRANCH= $TIDELIFT_PROJECT_BRANCH"
    - echo "TIDELIFT_PROJECT_GROUP= $TIDELIFT_PROJECT_GROUP"
        
    #Environment Variable mapping to Tidelift project and catalog requirements fields
    #Parse the IRONBANK_IMAGE_NAME AND IRONBANK_IMAGE tag fields for Tidelift project
    #Tidelift Project Name: project-Name_tag-number_branch-name 
    #External Prj Identifier: SupplierName/SubGroup/projectname/tagnumber/ 
    #b=($(echo "$IRONBANK_IMAGE_TAG" | tr ':' '\n'))
    #TIDELIFT_PROJECT_TAG=${b[1]}
    - echo "Parsing IRONBANK_IMAGE_NAME values, assigning Tidelift project variable values"
    - |
        a=($(echo "$IRONBANK_IMAGE_NAME" | tr '/' '\n'))
        TIDELIFT_PROJECT_SUPPLIER=${a[0]}
        TIDELIFT_PROJECT_SUPPLIER_TYPE=${a[1]}
        TIDELIFT_PROJECT_NAME="${a[2]}-${TIDELIFT_PROJECT_TAG}-${TIDELIFT_PROJECT_BRANCH}"
        TIDELIFT_PROJECT_EXTERNAL_ID="${TIDELIFT_PROJECT_SUPPLIER}/${TIDELIFT_PROJECT_SUPPLIER_TYPE}/${a[2]}/${TIDELIFT_PROJECT_TAG}/${TIDELIFT_PROJECT_BRANCH}"

    #delete section after testing script    
    - echo "IRONBANK_IMAGE_NAME ${IRONBANK_IMAGE_NAME}"
    - echo "IMAGE_VERSION ${IMAGE_VERSION}"
    - echo "Project Supplier ${TIDELIFT_PROJECT_SUPPLIER}"
    - echo "Project Supplier Org/Type ${TIDELIFT_PROJECT_SUPPLIER_TYPE}"
    - echo "Project Tag ${TIDELIFT_PROJECT_TAG}"
    - echo "Project Name ${TIDELIFT_PROJECT_NAME}"
    - echo "Project External ID ${TIDELIFT_PROJECT_EXTERNAL_ID}"
    
    ###Tidelift Project Group Classification
    #Create the Tidelift Project group based on Iron Bank Classification
    #Notes: Create the new group, Success! Your group 'general' has been created with the slug 'project-group-name' will be shared 
    #       The best approach would be to create a catalog instead of checking for existing group names. Ignore - Error: that group already exists. 
    #       group_msg=$(./tidelift groups new ${TIDELIFT_PROJECT_GROUP} --organization ${TIDELIFT_ORG_NAME} | jq -r '.Error: that group already exists')
 
    - echo "Starting Tidelift Project Alignment with Container Image SBOM"
    - echo "Creating Tidelift Project Group w/API - ${TIDELIFT_PROJECT_GROUP}"
    #- TL_GROUP_ERROR=$(./tidelift groups new ${TIDELIFT_PROJECT_GROUP} --organization ${TIDELIFT_ORG_NAME} --json)
    #- echo "Group Error |  $TL_GROUP_ERROR" 
    - |  
        make_request() {
          curl_output=$(curl -s -H "Accept: application/json" -H "Authorization: $TIDELIFT_API_KEY" \
            -X POST "https://api.tidelift.com/external-api/v1/$TIDELIFT_ORG_NAME/groups?group_name=$TIDELIFT_PROJECT_GROUP")
            echo "$curl_output"
        }
    - response=$(make_request)
    - echo "response -  $response"
    - |
        response_error = $(cat response | jq -r ".error")

        echo "response_error - $response_error"
        if (response_error == "existing_group") then
            echo "Group already exist, $TIDELIFT_PROJECT_GROUP"
        elif (response_error == "") then
            echo "Created a new group, $TIDELIFT_PROJECT_GROUP"
        fi 

    exit 1

    #Tidelift will eventually need to process SPDX, JSON, XML SBOMs. 
    #For now we are focused on CycloneDX SBOMs file only
    #Notes: grep 'revision\|error' tidelift_alignment_log.json 
    - echo "==================================="
    - echo "Tidelift Project New/Alignment Save"
    - echo "==================================="

    - echo "Processing the SBOM with Tidelift CLI"
    - ls | grep .json

    - echo "Tidelift creating a new project $TIDELIFT_PROJECT_NAME in catalog $TIDELIFT_PROJECT_CATALOG with group $TIDELIFT_PROJECT_GROUP"
        
    - |
        ./tidelift projects new $TIDELIFT_PROJECT_NAME --organization $TIDELIFT_ORG_NAME --default-branch $TIDELIFT_PROJECT_BRANCH --catalog $TIDELIFT_PROJECT_CATALOG --group $TIDELIFT_PROJECT_GROUP --external-identifier $TIDELIFT_PROJECT_EXTERNAL_ID --force --json >> tl_cli_log.json

        cat tl_cli_log.json
        TL_PRJ_ERROR=$(cat tl_cli_log.json | jq ".error")
        cat TL_PRJ_ERROR
        
    - exit 1

    - echo "Tidelift projects new error value $TL_PRJ_ERROR"

    - | 
        if (TL_PRJ_NEW_ERROR == "") then 
          echo "new project $TL_ALG_RESULT"
        elif (TL_PRJ_ERROR == "existing_project")
          echo "new project $TL_ALG_RESULT"
        fi

        exit 1

        if [ ["$TIDELIFT_ALIGNMENT_ID" != ""] && [$TIDELIFT_ALIGNMENT_ID =~ ^[0-9]+$] ] then
          echo "A new Iron Bank project is being processed by Tidelift: ${TIDELIFT_PROJECT_NAME} with External ID: ${TIDELIFT_PROJECT_EXTERNAL_ID}"
          echo "TIDELIFT_ALIGNMENT_ID: ${TIDELIFT_ALIGNMENT_ID}"
          
          ./tidelift status $TIDELIFT_ALIGNMENT_ID --wait

        elif [[ "$TIDELIFT_ALIGNMENT_ERROR" == "existing_project" ]] && [ "$TIDELIFT_ALIGNMENT_ERROR" != "" ] then 
          echo "existing project going to run alignment save"
          
          ./tidelift alignment save --directory . cyclondedx.json --organization $TIDELIFT_ORG_NAME --project $TIDELIFT_PROJECT_NAME --default-branch $TIDELIFT_PROJECT_BRANCH --group $TIDELIFT_PROJECT_GROUP --external-identifier $TIDELIFT_PROJECT_EXTERNAL_ID --skip-dot-tidelift --force --json >> tidelift_alignment_log.json
          
          TIDELIFT_ALIGNMENT_ID=$(cat tidelift_alignment_log.json | jq '.revision')
          echo "TIDELIFT_ALIGNMENT_ID: ${TIDELIFT_ALIGNMENT_ID}"
        else 
          echo "Tidelift Alignment Error: system could not execute alignment init, nor could it execute alignment save."
          echo "Iron Bank Project: $IRONBANK_IMAGE_NAME with $IMAGE_NAME could not be processed by Tidelift."
          exit 1
        fi

    - echo "-- Tidelift Alignment Completed --"
    