.post-build:
  stage: post-build
  needs:
    - load-scripts
    - build
  retry:
    max: 2
    when: runner_system_failure

create-tar:
  extends:
    - .post-build
    - .setup_modules
  variables:
    IMAGE_FILE: "${CI_PROJECT_NAME}-${CI_PIPELINE_ID}"
  script:
    - 'python3 "${PIPELINE_REPO_DIR}/stages/post-build/create_tar.py"'
  artifacts:
    when: always
    paths:
      - ${IMAGE_FILE}.tar
    expire_in: 1 week

create-sbom:
  extends: .post-build
  variables:
    SBOM_DIR: "${ARTIFACT_STORAGE}/sbom"
  artifacts:
    when: always
    paths:
      - "${SBOM_DIR}/"
    expire_in: 1 week
  image: "registry1.dso.mil/ironbank/anchore/enterprise/enterprise:4.4.1"
  script:
    - 'python3 "${PIPELINE_REPO_DIR}/stages/post-build/generate_sbom.py"'

    
### Tidelift.com SaaS Integration with ironbank-pipeline workflow ######
### Job will create a 1:1 container image project alignment with the Tidelift Catalog
tidelift-upload:
  extends:
    - .post-build
  needs:
    - lint
    - build
    - create-sbom
  variables:
    TIDELIFT_API_KEY: "${TIDELIFT_API_KEY}"
    SBOM_DIR: "${ARTIFACT_STORAGE}/sbom" 
    TIDELIFT_DIR: "${ARTIFACT_STORAGE}/tidelift"
    TIDELIFT_ORG_NAME: us-ironbank
    TIDELIFT_PROJECT_BRANCH: "${CI_COMMIT_BRANCH}"
    #set IB Tier Group to "General" as default for now. 
    IRONBANK_CLASSIFICATION: General  
    TIDELIFT_PROJECT_GROUP: "${IRONBANK_CLASSIFICATION}" 
    IRONBANK_IMAGE_NAME: "${IMAGE_NAME}"
    TIDELIFT_PROJECT_TAG: "${IMAGE_VERSION}"
    TIDELIFT_PROJECT_NAME: ""  
    TIDELIFT_PROJECT_EXTERNAL_ID: ""
    TIDELIFT_PROJECT_SUPPLIER:  ""
    TIDELIFT_PROJECT_SUPPLIER_TYPE: ""
    #The Tidelift catalog is to tbd at this time until IB and PI teams determine how to best capture data intellgience for their container image suppliers
    #they do not treat the container images differently (according to CHT lead)
    TIDELIFT_PROJECT_CATALOG: "ibtest"
    #notes: "${TIDELIFT_IMAGE_NAME}" uses "${CI_PROJECT_NAME}"
    #notes ref: https://docs.gitlab.com/ee/ci/variables/predefined_variables.html 
    #Variables for Tidelift Reports
    TIDELIFT_ALIGNMENT_ID:  ""
    TIDELIFT_ALIGNMENT_ERROR:  ""
    TL_JOB: ""
   # TIDELIFT_CVE_REPORT_ID: TBD
   # TIDELIFT_CVE_REPORT_NAME:  "${TIDELIFT_PROJECT_EXTERNAL_ID}_tidelift_cve_report.json"
  artifacts:
    when: always
    paths:
      - "${SBOM_DIR}/"
    expire_in: 1 week
  script:
    - cp ${SBOM_DIR}/sbom-cyclonedx-json.json cyclonedx.json
    - |
        pushd ${SBOM_DIR}
        ls -lha
        popd
    - echo "Downloading Tidelift CLI binary file" 
    - curl https://download.tidelift.com/cli/tidelift -o tidelift
    - echo "Setting Tidelift CLI permissions and updating binary file"
    - chmod +x tidelift
    - ./tidelift selfupdate
  #  - jq --version
    - echo "-* PRINTING ENV VARIABLES *-"
  #  - env
    - echo "TIDELIFT_PROJECT_BRANCH= $TIDELIFT_PROJECT_BRANCH"
    - echo "TIDELIFT_PROJECT_GROUP= $TIDELIFT_PROJECT_GROUP"
    #Environment Variable mapping to Tidelift project and catalog requirements fields
    #Parse the IRONBANK_IMAGE_NAME AND IRONBANK_IMAGE TAG fields for Tidelift project and catalog 
    #Tidelift Project Name: project-Name_tag-number_branch-name 
    #External Prj Identifier: SupplierName/SubGroup/projectname/tagnumber/ 
    #b=($(echo "$IRONBANK_IMAGE_TAG" | tr ':' '\n'))
    #TIDELIFT_PROJECT_TAG=${b[1]}
    - |
        echo "-- Parsing IB IRONBANK_IMAGE_NAME string values into Tidelift variable values --"
        a=($(echo "$IRONBANK_IMAGE_NAME" | tr '/' '\n'))
        TIDELIFT_PROJECT_SUPPLIER=${a[0]}
        TIDELIFT_PROJECT_SUPPLIER_TYPE=${a[1]}
        TIDELIFT_PROJECT_NAME="${a[2]}-${TIDELIFT_PROJECT_TAG}-${TIDELIFT_PROJECT_BRANCH}"
        TIDELIFT_PROJECT_EXTERNAL_ID="${TIDELIFT_PROJECT_SUPPLIER}/${TIDELIFT_PROJECT_SUPPLIER_TYPE}/${a[2]}/${TIDELIFT_PROJECT_TAG}"
            
        echo "IRONBANK_IMAGE_NAME=${IRONBANK_IMAGE_NAME}"
        echo "IMAGE_VERSION=${IMAGE_VERSION}"
        echo "Project Supplier: ${TIDELIFT_PROJECT_SUPPLIER}"
        echo "Project Supplier Org/Type: ${TIDELIFT_PROJECT_SUPPLIER_TYPE}"
        echo "Project Tag: ${TIDELIFT_PROJECT_TAG}"
        echo "Project Name: ${TIDELIFT_PROJECT_NAME}"
        echo "Project External ID: ${TIDELIFT_PROJECT_EXTERNAL_ID}"
    - echo "-- Done --"

    - echo "-* Starting Tidelift Project Alignment w/Container Image SBOM -*"
    ###Tidelift Project Group Classification
    #Create the Tidelift Project group based on Irin Bank Classification
    - |
      echo "-- Creating Tidelift Project Group --"
      #./tidelift groups new ${TIDELIFT_PROJECT_GROUP} --organization ${TIDELIFT_ORG_NAME}
    #Notes: Create the new group, Success! Your group 'general' has been created with the slug 'project-group-name' will be shared 
           #The best approach would be to create a catalog instead of checking for existing group names. Ignore - Error: that group already exists. 
           #group_msg=$(./tidelift groups new ${TIDELIFT_PROJECT_GROUP} --organization ${TIDELIFT_ORG_NAME} | jq -r '.Error: that group already exists')
    - echo "-* Processing the SBOM *-"
    - |
      echo "Coping Cyclonedx SBOM from artifacs directory"
      cp ${SBOM_DIR}/sbom-cyclonedx-json.json cyclonedx.json
    #cat cyclonedx.json
    - echo "File copied"
    #Tidelift will eventually need to process SPDX, JSON, XML SBOMs. 
    #For now we are focused on CycloneDX SBOMs only
    #Delete# if ./tidelift projects new $TIDELIFT_PROJECT_NAME --organization $TIDELIFT_ORG_NAME --default-branch $TIDELIFT_PROJECT_BRANCH --catalog $TIDELIFT_PROJECT_SUPPLIER --group $TIDELIFT_PROJECT_GROUP --external-identifier $TIDELIFT_PROJECT_EXTERNAL_ID --force; then
    #TIDELIFT_ALIGNMENT_ID=$(./tidelift init $TIDELIFT_PROJECT_NAME  --organization $TIDELIFT_ORG_NAME --catalog $TIDELIFT_PROJECT_CATALOG --default-branch $TIDELIFT_PROJECT_BRANCH --group $TIDELIFT_PROJECT_GROUP --external-identifier $TIDELIFT_PROJECT_EXTERNAL_ID --skip-dot-tidelift --force --json | jq -r '.revision')
    #echo "Tidelift Project Alignment ID: $TIDELIFT_ALIGNMENT_ID"
    #echo "Checking alignment status..."
    #./tidelift status $TIDELIFT_ALIGNMENT_ID --wait
    # grep 'revision\|error' tidelift_alignment_log.json

    #./tidelift init $TIDELIFT_PROJECT_NAME --organization $TIDELIFT_ORG_NAME --catalog $TIDELIFT_PROJECT_CATALOG --default-branch $TIDELIFT_PROJECT_BRANCH --group $TIDELIFT_PROJECT_GROUP --external-identifier $TIDELIFT_PROJECT_EXTERNAL_ID --skip-dot-tidelift/--force --json --debug
  
    - echo "==========================="
    - echo "Align project with Tidelift"
    - echo "==========================="
    - |
        echo "< Starting SBOM upload >"
        ./tidelift init $TIDELIFT_PROJECT_NAME --organization $TIDELIFT_ORG_NAME --catalog $TIDELIFT_PROJECT_CATALOG --group $TIDELIFT_PROJECT_GROUP --external-identifier $TIDELIFT_PROJECT_EXTERNAL_ID --skip-dot-tidelift --force --json >> tidelift_alignment_log.json

        cat tidelift_alignment_log.json

        sed '1,2d' tidelift_alignment_log.json >> tidelift_alignment_log2.json
        TIDELIFT_ALIGNMENT_ID=$(cat tidelift_alignment_log2.json | jq '.revision')
        TIDELIFT_ALIGNMENT_ERROR=$(cat tidelift_alignment_log2.json | jq '.error') 

        if [ ["$TIDELIFT_ALIGNMENT_ID" != ""] && [$TIDELIFT_ALIGNMENT_ID =~ ^[0-9]+$] ] then
          echo "A new Iron Bank project is being processed by Tidelift: ${TIDELIFT_PROJECT_NAME} with External ID: ${TIDELIFT_PROJECT_EXTERNAL_ID}"
          echo "TIDELIFT_ALIGNMENT_ID: ${TIDELIFT_ALIGNMENT_ID}"
          
          ./tidelift status $TIDELIFT_ALIGNMENT_ID --wait

        elif [[ "$TIDELIFT_ALIGNMENT_ERROR" == "existing_project" ]] && [ "$TIDELIFT_ALIGNMENT_ERROR" != "" ] then 
          echo "existing project going to run alignment save"
          
          ./tidelift alignment save --directory . cyclondedx.json --organization $TIDELIFT_ORG_NAME --project $TIDELIFT_PROJECT_NAME --default-branch $TIDELIFT_PROJECT_BRANCH --group $TIDELIFT_PROJECT_GROUP --external-identifier $TIDELIFT_PROJECT_EXTERNAL_ID --skip-dot-tidelift --force --json >> tidelift_alignment_log.json
          
          TIDELIFT_ALIGNMENT_ID=$(cat tidelift_alignment_log.json | jq '.revision')
          echo "TIDELIFT_ALIGNMENT_ID: ${TIDELIFT_ALIGNMENT_ID}"
        else 
          echo "Tidelift Alignment Error: system could not execute alignment init, nor could it execute alignment save."
          echo "Iron Bank Project: $IRONBANK_IMAGE_NAME with $IMAGE_NAME could not be processed by Tidelift."
          exit 1
        fi

    - echo "-- Tidelift Alignment Completed --"
    