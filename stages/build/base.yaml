build:
  #services:
  #  - name: registry:2
  #    alias: registry
  stage: build
  allow_failure: false 
  image: ${GITLAB_INTERNAL_REGISTRY}/dsop/ironbank-pipeline/rootless-build:1.3
  dependencies:
    - import artifacts
  tags:
    - ironbank-isolated
  variables:
    ARTIFACT_DIR: ${ARTIFACT_STORAGE}/build
    IMAGE_FILE: ${CI_PROJECT_NAME}-${IMG_VERSION}
  before_script:
    - IM_NAME=$(echo ${CI_PROJECT_PATH} | sed -e 's/.*dsop\/\(.*\)/\1/')
    - mkdir -p ${ARTIFACT_DIR}
    # Load any images used in Dockerfile build
    - |
      if [[ ! -z ${DOCKER_RESOURCE} ]]; then
        for file in $(find ${ARTIFACT_STORAGE}/import-artifacts/images -type f); do
          ls ${file}
          podman load -i ${file} --storage-driver=vfs
          #skopeo copy docker-archive:${file} docker://registry/mattermost/mattermost-operator:v1.6.1
          #          podman create localhost/mattermost/mattermost-operator
          #          podman containers
          #          podman tag mattermost/mattermost-operator mattermost/mattermost-operator:v1.6.1
        done
      fi
    - |
      if [[ ! -z ${HTTP_RESOURCE} ]]; then
        cp -r ${ARTIFACT_STORAGE}/import-artifacts/external-resources/* .
      fi
    - echo "${SATELLITE_URL} satellite" >> /etc/hosts
  script:
    - echo "IM_NAME=${IM_NAME}" >> build.env
    # Set the tag to eliminate /build/dsop and matching existing project hierarchy format
    - harbor_image_path=${STAGING_REGISTRY_URL}/$IM_NAME:$IMG_VERSION
    - buildah bud --authfile "${DOCKER_AUTH_CONFIG}" --format=docker --storage-driver=vfs -t $harbor_image_path .
    - buildah push --storage-driver=vfs --authfile "${DOCKER_AUTH_CONFIG_STAGING}" $harbor_image_path
    # Provide tar for use in later stages, matching existing tar naming convention
    - skopeo copy --src-authfile "${DOCKER_AUTH_CONFIG_STAGING}" docker://$harbor_image_path docker-archive:${ARTIFACT_DIR}/${IMAGE_FILE}.tar
    - echo "IMAGE_ID=sha256:$(podman inspect --storage-driver=vfs $harbor_image_path --format {{'.Id'}})" >> build.env
    - cat build.env

  artifacts:
    when: always
    paths:
      - ${ARTIFACT_DIR}/
    reports:
      dotenv: build.env
